// Code generated by MockGen. DO NOT EDIT.
// Source: arg.go
//
// Generated by this command:
//
//	mockgen -build_flags="-mod=mod" -package=arg -source=arg.go -destination=arg_mock.go
//

// Package arg is a generated GoMock package.
package gs_core

import (
	"reflect"

	"github.com/go-spring/spring-core/gs/internal/gs"
	"go.uber.org/mock/gomock"
)

// ArgMockContext is a mock of Context interface.
type ArgMockContext struct {
	ctrl     *gomock.Controller
	recorder *ArgMockContextMockRecorder
	isgomock struct{}
}

// ArgMockContextMockRecorder is the mock recorder for ArgMockContext.
type ArgMockContextMockRecorder struct {
	mock *ArgMockContext
}

// NewArgMockContext creates a new mock instance.
func NewArgMockContext(ctrl *gomock.Controller) *ArgMockContext {
	mock := &ArgMockContext{ctrl: ctrl}
	mock.recorder = &ArgMockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ArgMockContext) EXPECT() *ArgMockContextMockRecorder {
	return m.recorder
}

// Bind mocks base method.
func (m *ArgMockContext) Bind(v reflect.Value, tag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", v, tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *ArgMockContextMockRecorder) Bind(v, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*ArgMockContext)(nil).Bind), v, tag)
}

// Matches mocks base method.
func (m *ArgMockContext) Matches(c gs.Condition) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Matches", c)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Matches indicates an expected call of Matches.
func (mr *ArgMockContextMockRecorder) Matches(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Matches", reflect.TypeOf((*ArgMockContext)(nil).Matches), c)
}

// Wire mocks base method.
func (m *ArgMockContext) Wire(v reflect.Value, tag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wire", v, tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wire indicates an expected call of Wire.
func (mr *ArgMockContextMockRecorder) Wire(v, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wire", reflect.TypeOf((*ArgMockContext)(nil).Wire), v, tag)
}

// MockArg is a mock of Arg interface.
type MockArg struct {
	ctrl     *gomock.Controller
	recorder *MockArgMockRecorder
	isgomock struct{}
}

// MockArgMockRecorder is the mock recorder for MockArg.
type MockArgMockRecorder struct {
	mock *MockArg
}

// NewMockArg creates a new mock instance.
func NewMockArg(ctrl *gomock.Controller) *MockArg {
	mock := &MockArg{ctrl: ctrl}
	mock.recorder = &MockArgMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArg) EXPECT() *MockArgMockRecorder {
	return m.recorder
}
