// Code generated by MockGen. DO NOT EDIT.
// Source: cond.go
//
// Generated by this command:
//
//	mockgen -build_flags="-mod=mod" -package=cond -source=cond.go -destination=cond_mock.go
//

// Package cond is a generated GoMock package.
package gs_core

import (
	"reflect"

	"github.com/go-spring/spring-core/conf"
	"github.com/go-spring/spring-core/gs/internal/gs"
	"go.uber.org/mock/gomock"
)

// CondMockContext is a mock of Context interface.
type CondMockContext struct {
	ctrl     *gomock.Controller
	recorder *CondMockContextMockRecorder
	isgomock struct{}
}

// CondMockContextMockRecorder is the mock recorder for CondMockContext.
type CondMockContextMockRecorder struct {
	mock *CondMockContext
}

// NewCondMockContext creates a new mock instance.
func NewCondMockContext(ctrl *gomock.Controller) *CondMockContext {
	mock := &CondMockContext{ctrl: ctrl}
	mock.recorder = &CondMockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *CondMockContext) EXPECT() *CondMockContextMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *CondMockContext) Find(selector gs.BeanSelector) ([]gs.CondBean, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", selector)
	ret0, _ := ret[0].([]gs.CondBean)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *CondMockContextMockRecorder) Find(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*CondMockContext)(nil).Find), selector)
}

// Has mocks base method.
func (m *CondMockContext) Has(key string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *CondMockContextMockRecorder) Has(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*CondMockContext)(nil).Has), key)
}

// Prop mocks base method.
func (m *CondMockContext) Prop(key string, opts ...conf.GetOption) string {
	m.ctrl.T.Helper()
	varargs := []any{key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Prop", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Prop indicates an expected call of Prop.
func (mr *CondMockContextMockRecorder) Prop(key any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prop", reflect.TypeOf((*CondMockContext)(nil).Prop), varargs...)
}

// MockCondition is a mock of Condition interface.
type MockCondition struct {
	ctrl     *gomock.Controller
	recorder *MockConditionMockRecorder
	isgomock struct{}
}

// MockConditionMockRecorder is the mock recorder for MockCondition.
type MockConditionMockRecorder struct {
	mock *MockCondition
}

// NewMockCondition creates a new mock instance.
func NewMockCondition(ctrl *gomock.Controller) *MockCondition {
	mock := &MockCondition{ctrl: ctrl}
	mock.recorder = &MockConditionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCondition) EXPECT() *MockConditionMockRecorder {
	return m.recorder
}

// Matches mocks base method.
func (m *MockCondition) Matches(ctx gs.CondContext) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Matches", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Matches indicates an expected call of Matches.
func (mr *MockConditionMockRecorder) Matches(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Matches", reflect.TypeOf((*MockCondition)(nil).Matches), ctx)
}
