// Code generated by gs-mock v0.0.5. DO NOT EDIT.
// Source: https://github.com/go-spring/gs-mock
// gs mock -o gs_mock.go -i 'ConditionContext,ArgContext,Server'

package gs

import (
	"context"
	"github.com/go-spring/gs-mock/gsmock"
	"reflect"
)

// ConditionContextMockImpl is a generated mock implementation of the ConditionContext interface.
// It embeds the original interfaces and provides methods to register mock behaviors.
type ConditionContextMockImpl struct {
	r *gsmock.Manager
}

// NewConditionContextMockImpl creates a new mock instance for ConditionContext with the given
// gsmock.Manager and initializes the embedded interfaces.
func NewConditionContextMockImpl(r *gsmock.Manager) *ConditionContextMockImpl {
	return &ConditionContextMockImpl{r: r}
}

// Has executes the mocked Has method.
// with 1 parameters and 1 return values.
func (impl *ConditionContextMockImpl) Has(key string) bool {
	t := reflect.TypeFor[ConditionContextMockImpl]()
	if ret, ok := gsmock.Invoke(impl.r, t, "Has", key); ok {
		return gsmock.Unbox1[bool](ret)
	}
	panic("no mock code matched for ConditionContext.Has")
}

// MockHas returns a MockerNN instance to register mock behavior for Has.
func (impl *ConditionContextMockImpl) MockHas() *gsmock.Mocker11[string, bool] {
	t := reflect.TypeFor[ConditionContextMockImpl]()
	return gsmock.NewMocker11[string, bool](impl.r, t, "Has")
}

// Prop executes the mocked Prop method.
// with 2 parameters and 1 return values.
func (impl *ConditionContextMockImpl) Prop(key string, def ...string) string {
	t := reflect.TypeFor[ConditionContextMockImpl]()
	if ret, ok := gsmock.Invoke(impl.r, t, "Prop", key, def); ok {
		return gsmock.Unbox1[string](ret)
	}
	panic("no mock code matched for ConditionContext.Prop")
}

// MockProp returns a MockerNN instance to register mock behavior for Prop.
func (impl *ConditionContextMockImpl) MockProp() *gsmock.Mocker21[string, []string, string] {
	t := reflect.TypeFor[ConditionContextMockImpl]()
	return gsmock.NewMocker21[string, []string, string](impl.r, t, "Prop")
}

// Find executes the mocked Find method.
// with 1 parameters and 2 return values.
func (impl *ConditionContextMockImpl) Find(s BeanSelector) ([]ConditionBean, error) {
	t := reflect.TypeFor[ConditionContextMockImpl]()
	if ret, ok := gsmock.Invoke(impl.r, t, "Find", s); ok {
		return gsmock.Unbox2[[]ConditionBean, error](ret)
	}
	panic("no mock code matched for ConditionContext.Find")
}

// MockFind returns a MockerNN instance to register mock behavior for Find.
func (impl *ConditionContextMockImpl) MockFind() *gsmock.Mocker12[BeanSelector, []ConditionBean, error] {
	t := reflect.TypeFor[ConditionContextMockImpl]()
	return gsmock.NewMocker12[BeanSelector, []ConditionBean, error](impl.r, t, "Find")
}

// ArgContextMockImpl is a generated mock implementation of the ArgContext interface.
// It embeds the original interfaces and provides methods to register mock behaviors.
type ArgContextMockImpl struct {
	r *gsmock.Manager
}

// NewArgContextMockImpl creates a new mock instance for ArgContext with the given
// gsmock.Manager and initializes the embedded interfaces.
func NewArgContextMockImpl(r *gsmock.Manager) *ArgContextMockImpl {
	return &ArgContextMockImpl{r: r}
}

// Check executes the mocked Check method.
// with 1 parameters and 2 return values.
func (impl *ArgContextMockImpl) Check(c Condition) (bool, error) {
	t := reflect.TypeFor[ArgContextMockImpl]()
	if ret, ok := gsmock.Invoke(impl.r, t, "Check", c); ok {
		return gsmock.Unbox2[bool, error](ret)
	}
	panic("no mock code matched for ArgContext.Check")
}

// MockCheck returns a MockerNN instance to register mock behavior for Check.
func (impl *ArgContextMockImpl) MockCheck() *gsmock.Mocker12[Condition, bool, error] {
	t := reflect.TypeFor[ArgContextMockImpl]()
	return gsmock.NewMocker12[Condition, bool, error](impl.r, t, "Check")
}

// Bind executes the mocked Bind method.
// with 2 parameters and 1 return values.
func (impl *ArgContextMockImpl) Bind(v reflect.Value, tag string) error {
	t := reflect.TypeFor[ArgContextMockImpl]()
	if ret, ok := gsmock.Invoke(impl.r, t, "Bind", v, tag); ok {
		return gsmock.Unbox1[error](ret)
	}
	panic("no mock code matched for ArgContext.Bind")
}

// MockBind returns a MockerNN instance to register mock behavior for Bind.
func (impl *ArgContextMockImpl) MockBind() *gsmock.Mocker21[reflect.Value, string, error] {
	t := reflect.TypeFor[ArgContextMockImpl]()
	return gsmock.NewMocker21[reflect.Value, string, error](impl.r, t, "Bind")
}

// Wire executes the mocked Wire method.
// with 2 parameters and 1 return values.
func (impl *ArgContextMockImpl) Wire(v reflect.Value, tag string) error {
	t := reflect.TypeFor[ArgContextMockImpl]()
	if ret, ok := gsmock.Invoke(impl.r, t, "Wire", v, tag); ok {
		return gsmock.Unbox1[error](ret)
	}
	panic("no mock code matched for ArgContext.Wire")
}

// MockWire returns a MockerNN instance to register mock behavior for Wire.
func (impl *ArgContextMockImpl) MockWire() *gsmock.Mocker21[reflect.Value, string, error] {
	t := reflect.TypeFor[ArgContextMockImpl]()
	return gsmock.NewMocker21[reflect.Value, string, error](impl.r, t, "Wire")
}

// ServerMockImpl is a generated mock implementation of the Server interface.
// It embeds the original interfaces and provides methods to register mock behaviors.
type ServerMockImpl struct {
	r *gsmock.Manager
}

// NewServerMockImpl creates a new mock instance for Server with the given
// gsmock.Manager and initializes the embedded interfaces.
func NewServerMockImpl(r *gsmock.Manager) *ServerMockImpl {
	return &ServerMockImpl{r: r}
}

// ListenAndServe executes the mocked ListenAndServe method.
// with 1 parameters and 1 return values.
func (impl *ServerMockImpl) ListenAndServe(sig ReadySignal) error {
	t := reflect.TypeFor[ServerMockImpl]()
	if ret, ok := gsmock.Invoke(impl.r, t, "ListenAndServe", sig); ok {
		return gsmock.Unbox1[error](ret)
	}
	panic("no mock code matched for Server.ListenAndServe")
}

// MockListenAndServe returns a MockerNN instance to register mock behavior for ListenAndServe.
func (impl *ServerMockImpl) MockListenAndServe() *gsmock.Mocker11[ReadySignal, error] {
	t := reflect.TypeFor[ServerMockImpl]()
	return gsmock.NewMocker11[ReadySignal, error](impl.r, t, "ListenAndServe")
}

// Shutdown executes the mocked Shutdown method.
// with 1 parameters and 1 return values.
func (impl *ServerMockImpl) Shutdown(ctx context.Context) error {
	t := reflect.TypeFor[ServerMockImpl]()
	if ret, ok := gsmock.Invoke(impl.r, t, "Shutdown", ctx); ok {
		return gsmock.Unbox1[error](ret)
	}
	panic("no mock code matched for Server.Shutdown")
}

// MockShutdown returns a MockerNN instance to register mock behavior for Shutdown.
func (impl *ServerMockImpl) MockShutdown() *gsmock.Mocker11[context.Context, error] {
	t := reflect.TypeFor[ServerMockImpl]()
	return gsmock.NewMocker11[context.Context, error](impl.r, t, "Shutdown")
}
