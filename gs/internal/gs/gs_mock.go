// Code generated by gs-mock v0.0.4. DO NOT EDIT.
// Source: https://github.com/go-spring/gs-mock
// gs mock -o gs_mock.go -i 'ConditionContext,ArgContext,Runner,Job,Server'

package gs

import (
	"context"
	"github.com/go-spring/gs-mock/gsmock"
	"reflect"
)

type ConditionContextMockImpl struct {
	r *gsmock.Manager
}

func NewConditionContextMockImpl(r *gsmock.Manager) *ConditionContextMockImpl {
	return &ConditionContextMockImpl{r: r}
}

func (impl *ConditionContextMockImpl) Has(key string) bool {
	t := reflect.TypeFor[ConditionContextMockImpl]()
	if ret, ok := gsmock.Invoke(impl.r, t, "Has", key); ok {
		return gsmock.Unbox1[bool](ret)
	}
	panic("no mock code matched")
}

func (impl *ConditionContextMockImpl) MockHas() *gsmock.Mocker11[string, bool] {
	t := reflect.TypeFor[ConditionContextMockImpl]()
	return gsmock.NewMocker11[string, bool](impl.r, t, "Has")
}

func (impl *ConditionContextMockImpl) Prop(key string, def ...string) string {
	t := reflect.TypeFor[ConditionContextMockImpl]()
	if ret, ok := gsmock.Invoke(impl.r, t, "Prop", key, def); ok {
		return gsmock.Unbox1[string](ret)
	}
	panic("no mock code matched")
}

func (impl *ConditionContextMockImpl) MockProp() *gsmock.Mocker21[string, []string, string] {
	t := reflect.TypeFor[ConditionContextMockImpl]()
	return gsmock.NewMocker21[string, []string, string](impl.r, t, "Prop")
}

func (impl *ConditionContextMockImpl) Find(s BeanSelector) ([]ConditionBean, error) {
	t := reflect.TypeFor[ConditionContextMockImpl]()
	if ret, ok := gsmock.Invoke(impl.r, t, "Find", s); ok {
		return gsmock.Unbox2[[]ConditionBean, error](ret)
	}
	panic("no mock code matched")
}

func (impl *ConditionContextMockImpl) MockFind() *gsmock.Mocker12[BeanSelector, []ConditionBean, error] {
	t := reflect.TypeFor[ConditionContextMockImpl]()
	return gsmock.NewMocker12[BeanSelector, []ConditionBean, error](impl.r, t, "Find")
}

type ArgContextMockImpl struct {
	r *gsmock.Manager
}

func NewArgContextMockImpl(r *gsmock.Manager) *ArgContextMockImpl {
	return &ArgContextMockImpl{r: r}
}

func (impl *ArgContextMockImpl) Check(c Condition) (bool, error) {
	t := reflect.TypeFor[ArgContextMockImpl]()
	if ret, ok := gsmock.Invoke(impl.r, t, "Check", c); ok {
		return gsmock.Unbox2[bool, error](ret)
	}
	panic("no mock code matched")
}

func (impl *ArgContextMockImpl) MockCheck() *gsmock.Mocker12[Condition, bool, error] {
	t := reflect.TypeFor[ArgContextMockImpl]()
	return gsmock.NewMocker12[Condition, bool, error](impl.r, t, "Check")
}

func (impl *ArgContextMockImpl) Bind(v reflect.Value, tag string) error {
	t := reflect.TypeFor[ArgContextMockImpl]()
	if ret, ok := gsmock.Invoke(impl.r, t, "Bind", v, tag); ok {
		return gsmock.Unbox1[error](ret)
	}
	panic("no mock code matched")
}

func (impl *ArgContextMockImpl) MockBind() *gsmock.Mocker21[reflect.Value, string, error] {
	t := reflect.TypeFor[ArgContextMockImpl]()
	return gsmock.NewMocker21[reflect.Value, string, error](impl.r, t, "Bind")
}

func (impl *ArgContextMockImpl) Wire(v reflect.Value, tag string) error {
	t := reflect.TypeFor[ArgContextMockImpl]()
	if ret, ok := gsmock.Invoke(impl.r, t, "Wire", v, tag); ok {
		return gsmock.Unbox1[error](ret)
	}
	panic("no mock code matched")
}

func (impl *ArgContextMockImpl) MockWire() *gsmock.Mocker21[reflect.Value, string, error] {
	t := reflect.TypeFor[ArgContextMockImpl]()
	return gsmock.NewMocker21[reflect.Value, string, error](impl.r, t, "Wire")
}

type RunnerMockImpl struct {
	r *gsmock.Manager
}

func NewRunnerMockImpl(r *gsmock.Manager) *RunnerMockImpl {
	return &RunnerMockImpl{r: r}
}

func (impl *RunnerMockImpl) Run() error {
	t := reflect.TypeFor[RunnerMockImpl]()
	if ret, ok := gsmock.Invoke(impl.r, t, "Run"); ok {
		return gsmock.Unbox1[error](ret)
	}
	panic("no mock code matched")
}

func (impl *RunnerMockImpl) MockRun() *gsmock.Mocker01[error] {
	t := reflect.TypeFor[RunnerMockImpl]()
	return gsmock.NewMocker01[error](impl.r, t, "Run")
}

type JobMockImpl struct {
	r *gsmock.Manager
}

func NewJobMockImpl(r *gsmock.Manager) *JobMockImpl {
	return &JobMockImpl{r: r}
}

func (impl *JobMockImpl) Run(ctx context.Context) error {
	t := reflect.TypeFor[JobMockImpl]()
	if ret, ok := gsmock.Invoke(impl.r, t, "Run", ctx); ok {
		return gsmock.Unbox1[error](ret)
	}
	panic("no mock code matched")
}

func (impl *JobMockImpl) MockRun() *gsmock.Mocker11[context.Context, error] {
	t := reflect.TypeFor[JobMockImpl]()
	return gsmock.NewMocker11[context.Context, error](impl.r, t, "Run")
}

type ServerMockImpl struct {
	r *gsmock.Manager
}

func NewServerMockImpl(r *gsmock.Manager) *ServerMockImpl {
	return &ServerMockImpl{r: r}
}

func (impl *ServerMockImpl) ListenAndServe(sig ReadySignal) error {
	t := reflect.TypeFor[ServerMockImpl]()
	if ret, ok := gsmock.Invoke(impl.r, t, "ListenAndServe", sig); ok {
		return gsmock.Unbox1[error](ret)
	}
	panic("no mock code matched")
}

func (impl *ServerMockImpl) MockListenAndServe() *gsmock.Mocker11[ReadySignal, error] {
	t := reflect.TypeFor[ServerMockImpl]()
	return gsmock.NewMocker11[ReadySignal, error](impl.r, t, "ListenAndServe")
}

func (impl *ServerMockImpl) Shutdown(ctx context.Context) error {
	t := reflect.TypeFor[ServerMockImpl]()
	if ret, ok := gsmock.Invoke(impl.r, t, "Shutdown", ctx); ok {
		return gsmock.Unbox1[error](ret)
	}
	panic("no mock code matched")
}

func (impl *ServerMockImpl) MockShutdown() *gsmock.Mocker11[context.Context, error] {
	t := reflect.TypeFor[ServerMockImpl]()
	return gsmock.NewMocker11[context.Context, error](impl.r, t, "Shutdown")
}
